<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>操作手册</title>
    <url>/blog/2020/11/06/%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文件夹名&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean   <span class="comment">##清理 </span></span><br><span class="line">hexo g          <span class="comment">##构建、编译 </span></span><br><span class="line">hexo s          <span class="comment">##启动服务 </span></span><br><span class="line">hexo d          <span class="comment">##上传至服务器</span></span><br></pre></td></tr></table></figure>
<h3 id="配置详情"><a href="#配置详情" class="headerlink" title="配置详情"></a>配置详情</h3><p><a href="https://blog.csdn.net/weidong_y/article/details/90904781">csdn博客</a></p>
]]></content>
  </entry>
  <entry>
    <title>深度学习_数学</title>
    <url>/blog/2020/11/06/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="一-线代内容"><a href="#一-线代内容" class="headerlink" title="一 线代内容"></a>一 线代内容</h1><h2 id="1-标量、向量、矩阵、张量之间的联系"><a href="#1-标量、向量、矩阵、张量之间的联系" class="headerlink" title="1 标量、向量、矩阵、张量之间的联系"></a>1 标量、向量、矩阵、张量之间的联系</h2><h3 id="1-1-张量"><a href="#1-1-张量" class="headerlink" title="1.1 张量"></a>1.1 张量</h3><p>可以理解为矩阵的升级版，矩阵是二维的，张量可以是无限维。可以说标量就是0阶张量、向量就是1阶张量、矩阵就是2阶张量。</p>
<h3 id="1-2-向量和矩阵的范数归纳"><a href="#1-2-向量和矩阵的范数归纳" class="headerlink" title="1.2  向量和矩阵的范数归纳"></a>1.2  向量和矩阵的范数归纳</h3><h4 id="1-2-1-向量的范数"><a href="#1-2-1-向量的范数" class="headerlink" title="1.2.1 向量的范数"></a>1.2.1 向量的范数</h4><p><strong>向量的L1范数</strong></p>
<script type="math/tex; mode=display">
\Vert\vec{x}\Vert_1=\sum_{i=1}^N\vert{x_i}\vert</script><p><strong>向量的L2范数</strong></p>
<script type="math/tex; mode=display">
\Vert\vec{x}\Vert_2=\sqrt{\sum_{i=1}^N{\vert{x_i}\vert}^2}</script><p>这两个为最常见的范数形式，还有向量的负无穷范数、正无穷范数、p范数。<br><a href="https://blog.csdn.net/a493823882/article/details/80569888">范数简介</a></p>
<h4 id="1-2-2-矩阵的范数"><a href="#1-2-2-矩阵的范数" class="headerlink" title="1.2.2 矩阵的范数"></a>1.2.2 矩阵的范数</h4><p>矩阵的范数定义为</p>
<script type="math/tex; mode=display">
\Vert{A}\Vert_p :=\sup_{x\neq 0}\frac{\Vert{Ax}\Vert_p}{\Vert{x}\Vert_p}</script><p>当向量取不同范数时, 相应得到了不同的矩阵范数。<br><strong>矩阵的1-范数（列模）</strong><br>矩阵的每一列上的元素绝对值先求和，再从中取个最大的</p>
<script type="math/tex; mode=display">
\Vert A\Vert_1=\max_{1\le j\le n}\sum_{i=1}^m|{a_{ij}}|</script><p>总结就是列和最大。<br><strong>矩阵的2-范数（谱模）</strong><br>矩阵$A^TA$的最大特征值开平方根</p>
<script type="math/tex; mode=display">
\Vert A\Vert_2=\sqrt{\lambda_{max}(A^T A)}</script><p>其中， $\lambda_{max}(A^T A)$ 为 $A^T A​$ 的特征值绝对值的最大值。总结就是$A^T A​$最大特征根开平方根。矩阵还有无穷范数、核范数、L0范数、L1范数、F范数、L21范数。</p>
<h2 id="1-3-判断矩阵为正定"><a href="#1-3-判断矩阵为正定" class="headerlink" title="1.3 判断矩阵为正定"></a>1.3 判断矩阵为正定</h2><p><strong>定义</strong>：设$M$是n阶方阵，如果对任何非零向量z，都有$z^TMz&gt; 0$，其中$z^T$表示$z$的转置，就称$M$为正定矩阵。<br><strong>性质</strong>：<br>（1）正定矩阵的行列式恒为正；<br>（2）实对称矩阵A正定当且仅当A与单位矩阵合同；<br>（3）若A是正定矩阵，则A的逆矩阵也是正定矩阵；<br>（4）两个正定矩阵的和是正定矩阵；<br>（5）正实数与正定矩阵的乘积是正定矩阵。</p>
<h1 id="2-特征值和特征向量"><a href="#2-特征值和特征向量" class="headerlink" title="2 特征值和特征向量"></a>2 特征值和特征向量</h1><p>特征值分解可以得到特征值和特征向量。特征值表示的这个特征有多重要，而特征向量表示这个特征是什么。<br><a href="https://www.zhihu.com/people/zzz-22-60-93/activities">特征向量和特征值的解释</a></p>
<script type="math/tex; mode=display">
A\nu = \lambda \nu</script><p>$\lambda$为特征向量$\vec{v}$对应的特征值。</p>
<h1 id="二-概率论内容"><a href="#二-概率论内容" class="headerlink" title="二 概率论内容"></a>二 概率论内容</h1><h2 id="1-机器学习为什么要使用概率论"><a href="#1-机器学习为什么要使用概率论" class="headerlink" title="1 机器学习为什么要使用概率论"></a>1 机器学习为什么要使用概率论</h2><p>机器学习除了处理不确定的变量，也要处理随机变量。不确定和随机性来自多个方面，概率论来量化不确定性。</p>
<h2 id="2-概率分布"><a href="#2-概率分布" class="headerlink" title="2 概率分布"></a>2 概率分布</h2><h3 id="2-1-正态分布"><a href="#2-1-正态分布" class="headerlink" title="2.1 正态分布"></a>2.1 正态分布</h3><p>从概率论中，我们掌握很多概率分布，如高斯分布、布尔分布、指数分布、拉普拉斯分布等等，但正态分布无疑是最有特殊性的一个。<br>那么我们什么时候会用正太分布呢？在机器学习中，<strong>我们缺乏实数上分布的经验知识，不知道采取何种形式时</strong>，默认选择正态分布总是不会错的。理由如下：</p>
<ol>
<li>中心极限定理告诉我们，很多独立的随机变量近似服从正态分布，现实中很多复杂的系统都可以被建模成正太分布的噪声，即使该系统可以被结构化分解。</li>
<li>正态分布是具有相同方差的所有概率分布，不确定性最大的分布，换句话说正态分布是对模型加入先验知识最少的分布。<h3 id="2-2-正态分布的推广"><a href="#2-2-正态分布的推广" class="headerlink" title="2.2 正态分布的推广"></a>2.2 正态分布的推广</h3>正太分布可以推广到$R^n$空间，此时称为<strong>多维正态分布</strong><script type="math/tex; mode=display">
N(x;\vec\mu,\Sigma)=\sqrt{\frac{1}{(2\pi)^ndet(\Sigma)}}exp\left(-\frac{1}{2}(\vec{x}-\vec{\mu})^T\Sigma^{-1}(\vec{x}-\vec{\mu})\right)</script><a href="https://www.zhihu.com/question/36339816/answer/67043318">多维正态分布</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>深度学习_机器学习</title>
    <url>/blog/2020/11/06/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>参考资料来自<a href="https://github.com/comical233/DeepLearning-500-questions/blob/master/ch02_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80.md">github</a>和《深度学习》此书</p>
<h1 id="1-导言"><a href="#1-导言" class="headerlink" title="1 导言"></a>1 导言</h1><p>机器学习起源于上世纪50年代，1959年在IBM工作的Arthur Samuel设计了一个下棋程序，这个程序具有学习的能力，它可以在不断的对弈中提高自己。由此提出了“机器学习”这个概念。<br>当下研究火热的人工智能，机器学习是其的一个子集。机器学习在很多方面已经有了许多的应用，使用各种算法，如支持向量机，决策树、随机森林等等，一定程度上可以帮助人们完成一些数据预测，自动化，自动决策，最优化等初步替代脑力的任务。</p>
<h1 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2 基本概念"></a>2 基本概念</h1><h2 id="2-1-机器学习的本质"><a href="#2-1-机器学习的本质" class="headerlink" title="2.1 机器学习的本质"></a>2.1 机器学习的本质</h2><p>机器学习本质来讲就是一个算法黑箱，有输入有输出。一般来讲，机器学习的任务不是无中生有，让机器去发现事务规律，而是人们将事务规律转换为机器算法，让算法提取中数据所蕴含的规律，这就叫做机器学习。如果输入机器的数据是带有标签的，就称作有监督学习。如果是无标签的，就是无监督学习。<br>那么我所谓的“学习”具体指什么呢？Mithchell（1997）提供了一个简洁的定义：“对于某类任务$T$和性能度量$P$，一个计算机程序被认为可以从经验$E$中学习是指，通过经验$E$改进后，它在任务$T$上由性能度量$P$衡量的性能有所提升。”<br>任务$T$：分类、回归、转录、机器翻译、去噪……<br>度量$P$：准确度、错误率……</p>
<h2 id="2-2-机器学习的分类"><a href="#2-2-机器学习的分类" class="headerlink" title="2.2 机器学习的分类"></a>2.2 机器学习的分类</h2><p>主要分为四类</p>
<h3 id="2-2-1-监督学习"><a href="#2-2-1-监督学习" class="headerlink" title="2.2.1 监督学习"></a>2.2.1 监督学习</h3><p>特点：监督学习是使用已知正确答案的示例来训练网络。已知数据和其一一对应的标签，训练一个预测模型，将输入数据映射到标签的过程。<br>常见应用场景：监督式学习的常见应用场景如分类问题和回归问题。<br>常用算法举例：支持向量机(Support Vector Machine, SVM)，朴素贝叶斯(Naive Bayes)，逻辑回归(Logistic Regression)，K近邻(K-Nearest Neighborhood, KNN)，决策树(Decision Tree)，随机森林(Random Forest)，AdaBoost以及线性判别分析(Linear Discriminant Analysis, LDA)等。</p>
<h3 id="2-2-2-非监督学习"><a href="#2-2-2-非监督学习" class="headerlink" title="2.2.2 非监督学习"></a>2.2.2 非监督学习</h3><p>定义：在非监督式学习中，数据并不被特别标识，适用于你具有数据集但无标签的情况。学习模型是为了推断出数据的一些内在结构。<br>常见应用场景：常见的应用场景包括关联规则的学习以及聚类等。<br>算法举例：常见算法包括Apriori算法以及k-Means算法。<br><a href="https://blog.csdn.net/huihuisd/article/details/86489810">Apriori算法</a></p>
<h3 id="2-2-3半监督式学习"><a href="#2-2-3半监督式学习" class="headerlink" title="2.2.3半监督式学习"></a>2.2.3半监督式学习</h3><p>特点：在此学习方式下，输入数据部分被标记，部分没有被标记，这种学习模型可以用来进行预测。<br>​常见应用场景：应用场景包括分类和回归，算法包括一些对常用监督式学习算法的延伸，通过对已标记数据建模，在此基础上，对未标记数据进行预测。<br>​算法举例：常见算法如图论推理算法（Graph Inference）或者拉普拉斯支持向量机（Laplacian SVM）等。</p>
<h3 id="2-2-4-弱监督学习"><a href="#2-2-4-弱监督学习" class="headerlink" title="2.2.4 弱监督学习"></a>2.2.4 弱监督学习</h3><p>特点：弱监督学习可以看做是有多个标记的数据集合，次集合可以是空集，单个元素，或包含多种情况（没有标记，有一个标记，和有多个标记）的多个元素。 数据集的标签是不可靠的，这里的不可靠可以是标记不正确，多种标记，标记不充分，局部标记等。已知数据和其一一对应的弱标签，训练一个智能算法，将输入数据映射到一组更强的标签的过程。标签的强弱指的是标签蕴含的信息量的多少，比如相对于分割的标签来说，分类的标签就是弱标签。<br>​算法举例：举例，给出一张包含气球的图片，需要得出气球在图片中的位置及气球和背景的分割线，这就是已知弱标签学习强标签的问题。</p>
<h2 id="2-3-分类算法"><a href="#2-3-分类算法" class="headerlink" title="2.3 分类算法"></a>2.3 分类算法</h2><p>分类算法和回归算法是不同的。分类模型是认为模型的输出是离散的，例如大自然的生物被划分为不同的种类，是离散的。回归模型的输出是连续的，例如人的身高变化过程是一个连续过程，而不是离散的。<br>​因此，在实际建模过程时，采用分类模型还是回归模型，取决于你对任务（真实世界）的分析和理解。</p>
<h3 id="2-3-1-分类算法的优缺点"><a href="#2-3-1-分类算法的优缺点" class="headerlink" title="2.3.1 分类算法的优缺点"></a>2.3.1 分类算法的优缺点</h3><p><img src="https://img-blog.csdnimg.cn/20200228153522669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTE1MTIy,size_16,color_FFFFFF,t_70" alt="常见算法小结"></p>
<h3 id="2-3-2-评价方法"><a href="#2-3-2-评价方法" class="headerlink" title="2.3.2 评价方法"></a>2.3.2 评价方法</h3><p>ROC曲线和PR曲线<a href="https://www.jianshu.com/p/ac46cb7e6f87">详解</a></p>
<p><img src="https://img-blog.csdnimg.cn/20200228154642414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTE1MTIy,size_16,color_FFFFFF,t_70#pic_center =400x300" alt="示例"><br>如果一个学习器的P-R曲线被另一个学习器的P-R曲线完全包住，则可断言后者的性能优于前者，例如上面的A和B优于学习器C。但是A和B的性能无法直接判断，我们可以根据曲线下方的面积大小来进行比较，但更常用的是平衡点或者是F1值。平衡点（BEP）是P=R时的取值，如果这个值较大，则说明学习器的性能较好。而F1  =  2 <em> P </em> R ／( P + R )，同样，F1值越大，我们可以认为该学习器的性能较好。</p>
<h1 id="3-梯度下降"><a href="#3-梯度下降" class="headerlink" title="3 梯度下降"></a>3 梯度下降</h1><p>梯度下降是迭代法的一种,可以用于求解最小二乘问题(线性和非线性都可以)。在求解机器学习算法的模型参数，即无约束优化问题时，梯度下降（Gradient Descent）是最常采用的方法之一，另一种常用的方法是最小二乘法。在求解损失函数的最小值时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数和模型参数值。反过来，如果我们需要求解损失函数的最大值，这时就需要用梯度上升法来迭代了。在机器学习中，基于基本的梯度下降法发展了两种梯度下降方法，分别为随机梯度下降法和批量梯度下降法。（摘自百度百科）</p>
<p><img src="https://img-blog.csdnimg.cn/20200228160542116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTE1MTIy,size_16,color_FFFFFF,t_70#pic_center =400x300" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200228160509553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTE1MTIy,size_16,color_FFFFFF,t_70#pic_center =400x300" alt="在这里插入图片描述"><br>梯度下降是机器学习中常见优化算法之一，梯度下降法有以下几个作用：<br>（1）梯度下降是迭代法的一种，可以用于求解最小二乘问题。<br>（2）在求解机器学习算法的模型参数，即无约束优化问题时，主要有梯度下降法（Gradient Descent）和最小二乘法。<br>（3）在求解损失函数的最小值时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数和模型参数值。<br>（4）如果我们需要求解损失函数的最大值，可通过梯度上升法来迭代。梯度下降法和梯度上升法可相互转换。<br>（5）在机器学习中，梯度下降法主要有随机梯度下降法和批量梯度下降法。</p>
<p>当然梯度下降也存在缺点：<br>（1）靠近极小值时收敛速度减慢。<br>（2）直线搜索时可能会产生一些问题。<br>（3）可能会“之字形”地下降。</p>
]]></content>
  </entry>
  <entry>
    <title>集成电路（一）——AUL和存储单元</title>
    <url>/blog/2020/11/13/%E8%AE%A1%E7%AE%97%E9%80%BB%E8%BE%91%E5%8D%95%E5%85%83%E5%92%8C%E5%AD%98%E5%82%A8%E5%99%A8/</url>
    <content><![CDATA[<h2 id="计算逻辑单元（ALU）和存储单元"><a href="#计算逻辑单元（ALU）和存储单元" class="headerlink" title="计算逻辑单元（ALU）和存储单元"></a>计算逻辑单元（ALU）和存储单元</h2><p>本节参考<a href="https://zhuanlan.zhihu.com/p/77698071">算术逻辑单元 ALU</a></p>
<h3 id="一-ALU单元"><a href="#一-ALU单元" class="headerlink" title="一 ALU单元"></a>一 ALU单元</h3><p><strong>arithmetic and logic unit</strong> 算术逻辑单元，简称ALU，是计算机的数学大脑，也就是计算机里负责运算的组件，比如把两个数相加。基本其他的组件都用到了ALU，它有两个 单元 一个<strong>算术单元</strong>，一个<strong>逻辑单元</strong>。</p>
<h4 id="1-算术单元"><a href="#1-算术单元" class="headerlink" title="1 算术单元"></a>1 算术单元</h4><p>算术单元指完成加减基础运算的单元，例如简单的二进制加法运算电路即<strong>半加器</strong>，器电路原理图 如下所示。</p>
<p><img src="https://img-blog.csdnimg.cn/20201113173200847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTE1MTIy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>其中$SUM$为加法本位值$CHERRY$为进位。<br>同时可以用两个半加器组合成全加器如下图。<br><img src="https://img-blog.csdnimg.cn/20201113173451831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTE1MTIy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>然后进行封装可以为。<br><img src="https://img-blog.csdnimg.cn/20201115112756968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTE1MTIy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>当很多个全加器叠加起来就可以实现多位的加法，如常见的计算机8位加法运算。<br><img src="https://img-blog.csdnimg.cn/20201115112813388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTE1MTIy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>其他操作,可以使得输入</p>
<ul>
<li>加法（ADD）</li>
<li>减法（SUBTRACT）</li>
<li>增量+1（INCREMENT）</li>
<li>减量-1（DECREMENT）<br><img src="https://img-blog.csdnimg.cn/20201115112716274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTE1MTIy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li>
</ul>
<h4 id="2-逻辑单元"><a href="#2-逻辑单元" class="headerlink" title="2 逻辑单元"></a>2 逻辑单元</h4><p>顾名思义，逻辑单元在计算机内负责执行逻辑操作。比如之前说的“与”，“或”，“非”，“异或”。另外，它还能做简单的数值测试，比如利用许多个“或门”，来检测一个8位数字是否为“0”：<br><img src="https://img-blog.csdnimg.cn/20201115112834984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTE1MTIy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>它接受两个操作数输入($InA，InB$)，以及1个表示要进行的是哪个运算的操作代码(Opcode)，然后输出一个结果$（Out）$。<br>另外 ALU 还会有各种标志位$（flag）$，来表示计算的状态。例如： 进位标志（$Carry flag$）表示这次计算有没有进位，0标志（$Zero flag$）表示这次计算的结果是不是为0，这样就可以方便地判断计算是否溢出，或者两个输入的数是否相等。高级的$ ALU$ 中，会有更多的标志位，可以帮助处理器更快更方便地运算。</p>
<h4 id="软件部分（verilog）"><a href="#软件部分（verilog）" class="headerlink" title="软件部分（verilog）"></a>软件部分（verilog）</h4><p>加法<br>减法<br>有符号比较，小于置位<br>无符号比较，小于置位<br>按位与<br>按位或非<br>按位或<br>按位异或<br>逻辑左移<br>逻辑右移<br>算术右移<br>高位加载<br><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="comment">//*************************************************************************</span></span><br><span class="line"><span class="comment">//   &gt; 文件名: alu.v</span></span><br><span class="line"><span class="comment">//   &gt; 描述  ：ALU模块，可做12种操作</span></span><br><span class="line"><span class="comment">//   &gt; 作者  : LOONGSON</span></span><br><span class="line"><span class="comment">//   &gt; 日期  : 2016-04-14</span></span><br><span class="line"><span class="comment">//*************************************************************************</span></span><br><span class="line"><span class="keyword">module</span> alu(</span><br><span class="line">    <span class="keyword">input</span>  [<span class="number">11</span>:<span class="number">0</span>] alu_control, </span><br><span class="line">    <span class="keyword">input</span>  [<span class="number">31</span>:<span class="number">0</span>] alu_src1, </span><br><span class="line">    <span class="keyword">input</span>  [<span class="number">31</span>:<span class="number">0</span>] alu_src2,</span><br><span class="line">    <span class="keyword">output</span>   [<span class="number">31</span>:<span class="number">0</span>] alu_result </span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] alu_result;</span><br><span class="line">    <span class="keyword">wire</span> alu_add;   <span class="comment">//加法</span></span><br><span class="line">    <span class="keyword">wire</span> alu_sub;   <span class="comment">//减法</span></span><br><span class="line">    <span class="keyword">wire</span> alu_slt;   <span class="comment">//有符号比较，小于置位</span></span><br><span class="line">    <span class="keyword">wire</span> alu_sltu;  <span class="comment">//无符号比较，小于置位</span></span><br><span class="line">    <span class="keyword">wire</span> alu_and;   <span class="comment">//按位与</span></span><br><span class="line">    <span class="keyword">wire</span> alu_nor;   <span class="comment">//按位或非</span></span><br><span class="line">    <span class="keyword">wire</span> alu_or;    <span class="comment">//按位或 </span></span><br><span class="line">    <span class="keyword">wire</span> alu_xor;   <span class="comment">//按位异或</span></span><br><span class="line">    <span class="keyword">wire</span> alu_sll;   <span class="comment">//逻辑左移</span></span><br><span class="line">    <span class="keyword">wire</span> alu_srl;   <span class="comment">//逻辑右移</span></span><br><span class="line">    <span class="keyword">wire</span> alu_sra;   <span class="comment">//算数右移</span></span><br><span class="line">    <span class="keyword">wire</span> alu_lui;   <span class="comment">//高位加载</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> alu_add  = alu_control[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">assign</span> alu_sub  = alu_control[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">assign</span> alu_slt  = alu_control[ <span class="number">9</span>];</span><br><span class="line">    <span class="keyword">assign</span> alu_sltu = alu_control[ <span class="number">8</span>];</span><br><span class="line">    <span class="keyword">assign</span> alu_and  = alu_control[ <span class="number">7</span>];</span><br><span class="line">    <span class="keyword">assign</span> alu_nor  = alu_control[ <span class="number">6</span>];</span><br><span class="line">    <span class="keyword">assign</span> alu_or   = alu_control[ <span class="number">5</span>];</span><br><span class="line">    <span class="keyword">assign</span> alu_xor  = alu_control[ <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">assign</span> alu_sll  = alu_control[ <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">assign</span> alu_srl  = alu_control[ <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">assign</span> alu_sra  = alu_control[ <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">assign</span> alu_lui  = alu_control[ <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] add_sub_result; <span class="comment">//加减结果，减法用加法来实现</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] slt_result;     <span class="comment">//</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] sltu_result;    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] and_result;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] nor_result;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] or_result;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] xor_result;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] sll_result;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] srl_result;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] sra_result;     <span class="comment">//</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] lui_result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span> <span class="keyword">signed</span> [<span class="number">31</span>:<span class="number">0</span>] temp_src1;   <span class="comment">//带符号数的临时变量</span></span><br><span class="line">    <span class="keyword">assign</span> temp_src1 = alu_src1;    <span class="comment">//方便后面对alu_src1进行算数右移</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> and_result = alu_src1 &amp; alu_src2;        <span class="comment">//按位与</span></span><br><span class="line">    <span class="keyword">assign</span> or_result  = alu_src1 | alu_src2;        <span class="comment">//按位或</span></span><br><span class="line">    <span class="keyword">assign</span> nor_result = ~or_result;                 <span class="comment">//或非</span></span><br><span class="line">    <span class="keyword">assign</span> xor_result = alu_src1 ^ alu_src2;        <span class="comment">//异或</span></span><br><span class="line">    <span class="keyword">assign</span> lui_result = &#123;alu_src2[<span class="number">15</span>:<span class="number">0</span>], <span class="number">16&#x27;d0</span>&#125;;    <span class="comment">//高位加载，第二个操作数的低十六位加载到高十六位上</span></span><br><span class="line">    <span class="keyword">assign</span> sll_result = alu_src1 &lt;&lt; alu_src2;       <span class="comment">//逻辑左移</span></span><br><span class="line">    <span class="keyword">assign</span> srl_result = alu_src1 &gt;&gt; alu_src2;       <span class="comment">//逻辑右移</span></span><br><span class="line">    <span class="keyword">assign</span> slt_result = adder_result[<span class="number">31</span>] ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>;   <span class="comment">// 带符号数小于置位</span></span><br><span class="line">    <span class="keyword">assign</span> sltu_result = adder_cout ? <span class="number">1&#x27;b0</span> : <span class="number">1&#x27;b1</span>;     <span class="comment">//无符号数小于置位</span></span><br><span class="line">    <span class="keyword">assign</span> sra_result = temp_src1 &gt;&gt;&gt; alu_src2;     <span class="comment">//算数右移</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] adder_operand1;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] adder_operand2;</span><br><span class="line">    <span class="keyword">wire</span>        adder_cin     ;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] adder_result  ;</span><br><span class="line">    <span class="keyword">wire</span>        adder_cout    ;</span><br><span class="line">    <span class="keyword">assign</span> adder_operand1 = alu_src1; </span><br><span class="line">    <span class="keyword">assign</span> adder_operand2 = alu_add ? alu_src2 : ~alu_src2;     <span class="comment">//默认进行减法，为slt和sltu服务</span></span><br><span class="line">    <span class="keyword">assign</span> adder_cin      = ~alu_add;  <span class="comment">//巧妙到我都以为代码有bug</span></span><br><span class="line">    adder adder_module(     <span class="comment">//调用加法模块</span></span><br><span class="line">    <span class="variable">.operand1</span>(adder_operand1),</span><br><span class="line">    <span class="variable">.operand2</span>(adder_operand2),</span><br><span class="line">    <span class="variable">.cin</span>     (adder_cin     ),</span><br><span class="line">    <span class="variable">.result</span>  (adder_result  ),</span><br><span class="line">    <span class="variable">.cout</span>    (adder_cout    )</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">assign</span> add_sub_result = adder_result;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">always</span>@(*)</span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(alu_add | alu_sub)</span><br><span class="line">            alu_result &lt;= add_sub_result;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(alu_slt)</span><br><span class="line">            alu_result &lt;= slt_result;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(alu_sltu)</span><br><span class="line">            alu_result &lt;= sltu_result;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(alu_and)</span><br><span class="line">            alu_result &lt;= and_result;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(alu_nor)</span><br><span class="line">            alu_result &lt;= nor_result;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(alu_or)</span><br><span class="line">            alu_result &lt;= or_result;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(alu_xor)</span><br><span class="line">            alu_result &lt;= xor_result;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(alu_sll)</span><br><span class="line">            alu_result &lt;= sll_result;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(alu_srl)</span><br><span class="line">            alu_result &lt;= srl_result;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(alu_sra)</span><br><span class="line">            alu_result &lt;= sra_result;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(alu_lui)</span><br><span class="line">            alu_result &lt;= lui_result;</span><br><span class="line">         </span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="二-存储单元"><a href="#二-存储单元" class="headerlink" title="二 存储单元"></a>二 存储单元</h3><h4 id="1-静态存储器SRAM（Static-Radom-Access-Memory）"><a href="#1-静态存储器SRAM（Static-Radom-Access-Memory）" class="headerlink" title="1 静态存储器SRAM（Static Radom Access Memory）"></a>1 静态存储器SRAM（Static Radom Access Memory）</h4><p>SRAM主要用于主要用于<strong>二级快速缓存</strong>(Level2 C ache)。它利用晶体管来存储数据。与DRAM相比，SRAM的速度快，但在同样面积中SRAM的容量要比其它类型的内存小。</p>
<p>大部分FPGA器件採用了<strong>查找表</strong>（Look Up Table，LUT）结构。查找表的原理类似于ROM，其物理结构是静态存储器（SRAM），<strong>N个输入项的逻辑函数能够由一个2^N位容量的SRAM实现</strong>，函数值存放在SRAM中，SRAM的地址线起输入线的作用，地址即输入变量值，SRAM的输出为逻辑函数值。由连线开关实现与其它功能块的连接。<br><img src="https://img-blog.csdnimg.cn/20201115112912591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTE1MTIy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>corecells array：存储单元阵列</li>
<li>decode：行列地址译码器</li>
<li>Sense Amplifier：灵敏放大器</li>
<li>conntrol circuit：控制电路</li>
<li>FFIO：缓冲／驱动电路</li>
</ul>
<p>在图中，$A_{0}-A_{m-1}$为地址输入端，$CSB$、 $WEB$和$OEB$为控制端，控制读写操作，为低电平有效，$I/O_{0}-I/O_{N-1}$为数据输入输出端。存储阵列中的每个存储单元都与其他单元在行和列上共享电学连接，当中水平方向的连线称为“字线”，而垂直方向的数据流入和流出存储单元的连线称为“位线”。通过输入的地址可选择特定的字线和位线。字线和位线的交叉处就是被选中的存储单元。每个存储单元都是按这个方案被唯一选中，然后再对其进行读写操作。有的存储器设计成多位数据如4位或8位等同一时候输入和输出，这种话，就会同一时候有4个或8个存储单元按上述方法被选中进行读写操作。</p>
<p><strong>SRAM六管电路结构</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20201115112932135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTE1MTIy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>假设准备往图的6T存储单元写入“1”，先将某一组地址值输入到行、列译码器中，选中特定的单元，然后使写使能信号WE有效，将要写入的数据“1”通过写入电路变成“1”和“0”后分别加到选中单元的两条位线BL，BLB上，此时选中单元的WL=1，晶体管N0，N5打开，把BL，BLB上的信号分别送到Q，QB点，从而使Q=1，QB=0，这样数据“1”就被锁存在晶体管P2，P3，N3，N4构成的锁存器中。写入数据“0”的过程类似。<br>SRAM的读过程以读“1”为例，通过译码器选中某列位线对BL，BLB进行预充电到电源电压VDD，预充电结束后，再通过行译码器选中某行，则某一存储单元被选中，由于其中存放的是“1”，则WL=1、Q=1、QB=0。晶体管N4、N5导通，有电流经N4、N5到地，从而使BLB电位下降，BL、BLB间电位产生电压差，当电压差达到一定值后打开灵敏度放大器，对电压进行放大，再送到输出电路，读出数据。</p>
]]></content>
      <categories>
        <category>集成电路</category>
      </categories>
  </entry>
</search>
